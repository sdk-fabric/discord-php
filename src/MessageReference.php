<?php
/**
 * MessageReference automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */

namespace SdkFabric\Discord;

use PSX\Schema\Attribute\Description;
use PSX\Schema\Attribute\Key;

#[Description('')]
class MessageReference implements \JsonSerializable, \PSX\Record\RecordableInterface
{
    #[Key('message_id')]
    #[Description('Id of the originating message')]
    protected ?string $messageId = null;
    #[Key('channel_id')]
    #[Description('Id of the originating message\'s channel')]
    protected ?string $channelId = null;
    #[Key('guild_id')]
    #[Description('Id of the originating message\'s guild')]
    protected ?string $guildId = null;
    #[Key('fail_if_not_exists')]
    #[Description('When sending, whether to error if the referenced message doesn\'t exist instead of sending as a normal (non-reply) message, default true')]
    protected ?bool $failIfNotExists = null;
    public function setMessageId(?string $messageId): void
    {
        $this->messageId = $messageId;
    }
    public function getMessageId(): ?string
    {
        return $this->messageId;
    }
    public function setChannelId(?string $channelId): void
    {
        $this->channelId = $channelId;
    }
    public function getChannelId(): ?string
    {
        return $this->channelId;
    }
    public function setGuildId(?string $guildId): void
    {
        $this->guildId = $guildId;
    }
    public function getGuildId(): ?string
    {
        return $this->guildId;
    }
    public function setFailIfNotExists(?bool $failIfNotExists): void
    {
        $this->failIfNotExists = $failIfNotExists;
    }
    public function getFailIfNotExists(): ?bool
    {
        return $this->failIfNotExists;
    }
    public function toRecord(): \PSX\Record\RecordInterface
    {
        /** @var \PSX\Record\Record<mixed> $record */
        $record = new \PSX\Record\Record();
        $record->put('message_id', $this->messageId);
        $record->put('channel_id', $this->channelId);
        $record->put('guild_id', $this->guildId);
        $record->put('fail_if_not_exists', $this->failIfNotExists);
        return $record;
    }
    public function jsonSerialize(): object
    {
        return (object) $this->toRecord()->getAll();
    }
}
