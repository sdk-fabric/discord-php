<?php
/**
 * User automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */

namespace SdkFabric\Discord;

use PSX\Schema\Attribute\Description;
use PSX\Schema\Attribute\Key;

#[Description('')]
class User implements \JsonSerializable, \PSX\Record\RecordableInterface
{
    #[Description('')]
    protected ?string $id = null;
    #[Description('')]
    protected ?string $username = null;
    #[Description('')]
    protected ?string $discriminator = null;
    #[Key('global_name')]
    #[Description('')]
    protected ?string $globalName = null;
    #[Description('')]
    protected ?string $avatar = null;
    #[Description('')]
    protected ?bool $bot = null;
    #[Description('')]
    protected ?bool $system = null;
    #[Key('mfa_enabled')]
    #[Description('')]
    protected ?bool $mfaEnabled = null;
    #[Description('')]
    protected ?string $banner = null;
    #[Key('accent_color')]
    #[Description('')]
    protected ?int $accentColor = null;
    #[Description('')]
    protected ?string $locale = null;
    #[Description('')]
    protected ?bool $verified = null;
    #[Description('')]
    protected ?string $email = null;
    #[Description('')]
    protected ?int $flags = null;
    #[Key('premium_type')]
    #[Description('')]
    protected ?int $premiumType = null;
    #[Key('public_flags')]
    #[Description('')]
    protected ?int $publicFlags = null;
    public function setId(?string $id) : void
    {
        $this->id = $id;
    }
    public function getId() : ?string
    {
        return $this->id;
    }
    public function setUsername(?string $username) : void
    {
        $this->username = $username;
    }
    public function getUsername() : ?string
    {
        return $this->username;
    }
    public function setDiscriminator(?string $discriminator) : void
    {
        $this->discriminator = $discriminator;
    }
    public function getDiscriminator() : ?string
    {
        return $this->discriminator;
    }
    public function setGlobalName(?string $globalName) : void
    {
        $this->globalName = $globalName;
    }
    public function getGlobalName() : ?string
    {
        return $this->globalName;
    }
    public function setAvatar(?string $avatar) : void
    {
        $this->avatar = $avatar;
    }
    public function getAvatar() : ?string
    {
        return $this->avatar;
    }
    public function setBot(?bool $bot) : void
    {
        $this->bot = $bot;
    }
    public function getBot() : ?bool
    {
        return $this->bot;
    }
    public function setSystem(?bool $system) : void
    {
        $this->system = $system;
    }
    public function getSystem() : ?bool
    {
        return $this->system;
    }
    public function setMfaEnabled(?bool $mfaEnabled) : void
    {
        $this->mfaEnabled = $mfaEnabled;
    }
    public function getMfaEnabled() : ?bool
    {
        return $this->mfaEnabled;
    }
    public function setBanner(?string $banner) : void
    {
        $this->banner = $banner;
    }
    public function getBanner() : ?string
    {
        return $this->banner;
    }
    public function setAccentColor(?int $accentColor) : void
    {
        $this->accentColor = $accentColor;
    }
    public function getAccentColor() : ?int
    {
        return $this->accentColor;
    }
    public function setLocale(?string $locale) : void
    {
        $this->locale = $locale;
    }
    public function getLocale() : ?string
    {
        return $this->locale;
    }
    public function setVerified(?bool $verified) : void
    {
        $this->verified = $verified;
    }
    public function getVerified() : ?bool
    {
        return $this->verified;
    }
    public function setEmail(?string $email) : void
    {
        $this->email = $email;
    }
    public function getEmail() : ?string
    {
        return $this->email;
    }
    public function setFlags(?int $flags) : void
    {
        $this->flags = $flags;
    }
    public function getFlags() : ?int
    {
        return $this->flags;
    }
    public function setPremiumType(?int $premiumType) : void
    {
        $this->premiumType = $premiumType;
    }
    public function getPremiumType() : ?int
    {
        return $this->premiumType;
    }
    public function setPublicFlags(?int $publicFlags) : void
    {
        $this->publicFlags = $publicFlags;
    }
    public function getPublicFlags() : ?int
    {
        return $this->publicFlags;
    }
    public function toRecord() : \PSX\Record\RecordInterface
    {
        /** @var \PSX\Record\Record<mixed> $record */
        $record = new \PSX\Record\Record();
        $record->put('id', $this->id);
        $record->put('username', $this->username);
        $record->put('discriminator', $this->discriminator);
        $record->put('global_name', $this->globalName);
        $record->put('avatar', $this->avatar);
        $record->put('bot', $this->bot);
        $record->put('system', $this->system);
        $record->put('mfa_enabled', $this->mfaEnabled);
        $record->put('banner', $this->banner);
        $record->put('accent_color', $this->accentColor);
        $record->put('locale', $this->locale);
        $record->put('verified', $this->verified);
        $record->put('email', $this->email);
        $record->put('flags', $this->flags);
        $record->put('premium_type', $this->premiumType);
        $record->put('public_flags', $this->publicFlags);
        return $record;
    }
    public function jsonSerialize() : object
    {
        return (object) $this->toRecord()->getAll();
    }
}
