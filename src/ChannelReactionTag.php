<?php
/**
 * ChannelReactionTag automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */

namespace SdkFabric\Discord;

use GuzzleHttp\Exception\BadResponseException;
use Sdkgen\Client\Exception\ClientException;
use Sdkgen\Client\Exception\UnknownStatusCodeException;
use Sdkgen\Client\TagAbstract;

class ChannelReactionTag extends TagAbstract
{
    /**
     * @param string $channelId
     * @param string $messageId
     * @param string $emoji
     * @param int|null $type
     * @param string|null $after
     * @param int|null $limit
     * @return array<User>
     * @throws ClientException
     */
    public function getAll(string $channelId, string $messageId, string $emoji, ?int $type = null, ?string $after = null, ?int $limit = null): array
    {
        $url = $this->parser->url('/channels/:channel_id/messages/:message_id/reactions/:emoji', [
            'channel_id' => $channelId,
            'message_id' => $messageId,
            'emoji' => $emoji,
        ]);

        $options = [
            'query' => $this->parser->query([
                'type' => $type,
                'after' => $after,
                'limit' => $limit,
            ], [
            ]),
        ];

        try {
            $response = $this->httpClient->request('GET', $url, $options);
            $data = (string) $response->getBody();

            return $this->parser->parse($data, User::class, isArray: true);
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $data = (string) $e->getResponse()->getBody();

            switch ($e->getResponse()->getStatusCode()) {
                default:
                    throw new UnknownStatusCodeException('The server returned an unknown status code');
            }
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }

    /**
     * @param string $channelId
     * @param string $messageId
     * @return void
     * @throws ClientException
     */
    public function deleteAll(string $channelId, string $messageId): void
    {
        $url = $this->parser->url('/channels/:channel_id/messages/:message_id/reactions', [
            'channel_id' => $channelId,
            'message_id' => $messageId,
        ]);

        $options = [
            'query' => $this->parser->query([
            ], [
            ]),
        ];

        try {
            $response = $this->httpClient->request('DELETE', $url, $options);
            $data = (string) $response->getBody();

        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $data = (string) $e->getResponse()->getBody();

            switch ($e->getResponse()->getStatusCode()) {
                default:
                    throw new UnknownStatusCodeException('The server returned an unknown status code');
            }
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }


}
